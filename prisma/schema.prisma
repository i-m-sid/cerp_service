generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  picture   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memberships OrganizationMembership[]
}

model Organization {
  id                   String   @id @default(cuid())
  orgName              String   
  gstNumber            String?        
  legalName            String
  tradeName            String?
  phoneNumber          String?
  email                String?
  address              Json?
  config               Json?
  createdAt   DateTime @default(now())

  members     OrganizationMembership[]
  challanTemplates   ChallanTemplate[]
  parties   Party[]
  partyTypes PartyType[]
  itemCategories ItemCategory[]
  items         Item[]
  invoices      Invoice[]
  vehicles      Vehicle[]
  uoms UnitOfMeasurement[]
  challanStatuses ChallanStatus[]
}

model OrganizationMembership {
  id             String        @id @default(cuid())
  userId         String
  orgId          String
  role           UserRole

  user           User          @relation(fields: [userId], references: [id])
  organization   Organization  @relation(fields: [orgId], references: [id])
}


model Party {
  id                   String         @id @default(cuid())
  orgId                String
  gstNumber            String?        
  legalName            String
  tradeName            String?
  phoneNumber          String?
  email                String?
  openingBalance       Decimal        @default(0)
  address              Json?
  placeOfSupply        Json?
  customFields         Json?
  vehicles             Vehicle[]
  invoices             Invoice[]
  allowedPartyTypes    PartyType[] @relation("PartyPartyType")
  organization   Organization  @relation(fields: [orgId], references: [id])

  @@unique([orgId, gstNumber])
  @@index([orgId])
}

model PartyType {
  id        String            @id @default(cuid())
  label     String            
  orgId     String
  templates ChallanTemplate[] @relation("ChallanTemplatePartyType")
  parties   Party[]        @relation("PartyPartyType")
  organization   Organization  @relation(fields: [orgId], references: [id])

  @@unique([orgId, label])  
}

model ChallanTemplate {
  id                    String                 @id @default(cuid())
  name                  String
  description           String?
  orgId                 String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  challans              Challan[]
  fieldSchema           ChallanTemplateField[]
  invoices              Invoice[]
  transactionType       TransactionType
  allowedStatuses       ChallanStatus[]        @relation("ChallanTemplateChallanStatus")
  allowedPartyTypes     PartyType[]            @relation("ChallanTemplatePartyType")
  allowedItemCategories ItemCategory[]         @relation("ChallanTemplateItemCategory")
  organization          Organization           @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model ChallanTemplateField {
  id         String          @id @default(cuid())
  templateId String
  label      String
  type       FieldType
  isRequired Boolean         @default(false)
  refModel   String?
  refKey     String?
  refId      String?
  invoiceField String?
  dependsOn  String[]
  accessLevel UserRole   @default(OWNER) 
  flex       Int?
  row        Int?
  column     Int?
  data       String[]
  isVisible  Boolean          @default(true)
  formula    String?
  template   ChallanTemplate @relation(fields: [templateId], references: [id])
}

model ItemCategory {
  id           String              @id @default(cuid())
  name         String
  isService    Boolean             @default(false)
  description  String?
  hsnCode      String?
  cgst         Decimal            @default(0)
  sgst         Decimal            @default(0)
  igst         Decimal            @default(0)
  orgId        String
  items        Item[]
  allowedUnits UnitOfMeasurement[] @relation("ItemCategoryUnitOfMeasurement")
  templates    ChallanTemplate[]   @relation("ChallanTemplateItemCategory")
  organization   Organization  @relation(fields: [orgId], references: [id])
}

model Item {
  id          String       @id @default(cuid())
  name        String
  description String?
  categoryId  String
  orgId        String
  category    ItemCategory @relation(fields: [categoryId], references: [id])
  organization   Organization  @relation(fields: [orgId], references: [id])

  @@index([orgId])
}

model Challan {
  id            String          @id @default(cuid())
  challanNumber String          
  date          DateTime        @default(now())
  templateId    String
  statusId      String?
  invoiceId     String?
  customFields  Json
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  status        ChallanStatus?   @relation(fields: [statusId], references: [id])
  template      ChallanTemplate @relation(fields: [templateId], references: [id])
  invoice       Invoice?        @relation(fields: [invoiceId], references: [id])

  @@index([templateId])
}

model ChallanStatus {
  id         String          @id @default(cuid())
  orgId      String
  label      String
  color      String?
  challans   Challan[]
  templates  ChallanTemplate[] @relation("ChallanTemplateChallanStatus")
  organization   Organization  @relation(fields: [orgId], references: [id])
}

model UnitOfMeasurement {
  id         String         @id @default(cuid())
  label      String
  shortCode  String
  orgId      String
  categories ItemCategory[] @relation("ItemCategoryUnitOfMeasurement")
  organization   Organization  @relation(fields: [orgId], references: [id])
}

model Vehicle {
  id                         String    @id @default(cuid())
  vehicleNumber              String
  type                       String
  registeredAt               DateTime?
  isActive                   Boolean   @default(true)
  ownerId                    String?
  lastFuelOdometerReading    Decimal?
  lastServiceOdometerReading Decimal?
  lastServiceDate            DateTime?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  orgId                      String
  owner                      Party? @relation(fields: [ownerId], references: [id])
  organization               Organization  @relation(fields: [orgId], references: [id])

  @@unique([orgId, vehicleNumber])
  @@index([orgId])
}

model Invoice {
  id                         String    @id @default(cuid())
  challanTemplateId          String    
  invoiceNumber              String
  date                       DateTime
  partyId                    String
  poNumber                   String?
  orgDetails                 Json
  partyDetails               Json
  invoiceType                InvoiceType
  transactionType            TransactionType
  includeTax                 Boolean  @default(true)
  roundOff                   Boolean  @default(true)
  lineItems                  Json
  subTotal                   Decimal? @default(0)
  cgstAmount                 Decimal? @default(0)
  sgstAmount                 Decimal? @default(0)
  igstAmount                 Decimal? @default(0)
  discountAmount             Decimal? @default(0)
  roundOffAmount             Decimal? @default(0)
  totalAmount                Decimal? @default(0)
  notes                      String?
  termsAndConditions         String?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  orgId                      String
  challans                   Challan[]
  party                      Party? @relation(fields: [partyId], references: [id])
  organization               Organization  @relation(fields: [orgId], references: [id])
  challanTemplate            ChallanTemplate @relation(fields: [challanTemplateId], references: [id])
}

enum FieldType {
  TEXT
  NUMBER
  DECIMAL
  BOOLEAN
  DATE
  SINGLE_SELECT
  MULTI_SELECT
}

enum TransactionType {
  SALES
  PURCHASE
}

enum InvoiceType {
  INVOICE
  PRO_FORMA
  QUOTE
  ORDER
}

enum UserRole {
  OWNER           // Full control â€” usually the organization creator
  ADMIN           // Manages users, settings, and all data
  MANAGER         // Handles operational aspects like approving entries
  ACCOUNTANT      // Manages invoices, ledgers, and finances
  DATA_ENTRY      // Can create and edit records but limited permissions
  VIEWER          // Read-only access 
}


